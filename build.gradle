plugins {
	id 'java'

	id 'com.github.johnrengelman.shadow' version '4.0.4'
	id 'com.github.hierynomus.license' version '0.15.0'
	id 'nebula.info' version '5.2.0'
	id 'checkstyle'
	id 'findbugs'
	id 'pmd'

	id 'com.github.ben-manes.versions' version '0.42.0'
}

def os = System.getProperty("os.name").toLowerCase(Locale.ENGLISH)

apply from: 'gradle/dependencyIndicies.gradle'
apply from: 'gradle/macos.gradle'

configurations {
	appbundler
}

repositories {
	mavenCentral()
	jcenter()
	maven { url 'https://libraries.minecraft.net' }
}

dependencies {
	compile group: 'org.slf4j', name: 'slf4j-api', version: '2.0.5'
	compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.11'

	compile group: 'com.mojang', name: 'authlib', version: '1.5.22'

	compile group: 'com.google.code.gson', name: 'gson', version: '2.9.1'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.13.3'
	compile group: 'org.apache.httpcomponents', name: 'fluent-hc', version: '4.5.13'
	compile group: 'club.minnced', name: 'java-discord-rpc', version: '2.0.2'
	compile group: 'org.java-websocket', name: 'Java-WebSocket', version: '1.5.3'
	compile group: 'net.sf.jopt-simple', name: 'jopt-simple', version: '5.0.4'
	compile group: 'com.github.vatbub', name: 'mslinks', version: '1.0.5'
	compile group: 'org.jclarion', name: 'image4j', version: '0.7'
	compile group: 'io.sentry', name: 'sentry', version: '5.6.0'
	compile group: 'io.sentry', name: 'sentry-logback', version: '5.6.0'
	compile group: 'org.nanohttpd', name: 'nanohttpd', version: '2.3.1'

	compile files(os.contains("mac") ? 'run/jcef/jcef_app.app/Contents/Java/jcef.jar' : 'run/jcef/jcef.jar')
	appbundler files('lib/appbundler-1.0ea.jar')
}

jar {
	manifest {
		attributes(
				'Built-By': System.properties['user.name'],
				'Created-By': "${System.properties['java.vm.version']} (${System.properties['java.vm.vendor']})",
				'Implementation-Name': project.name,
				'Implementation-Version': project.version,
				'Implementation-Vendor': project.url,
				'Class-Path': 'jcef/jcef.jar',
				'Main-Class': 'de.myftb.launcher.Launcher'
		)
	}
}

/* ======================================== Buildscript Configuration ======================================== */

build.dependsOn shadowJar

sourceCompatibility = targetCompatibility = '1.8'

sourceSets.main.resources.srcDirs += 'src/main/ui/build'

configure([compileJava, compileTestJava]) {
	options.compilerArgs += ['-Xlint:all', '-Xlint:-path']
	options.deprecation = true
	options.encoding = 'UTF-8'
}

if (System.getenv("LAUNCHER_CI") != null) {
	sourceSets {
		main {
			java {
				srcDirs = ['build/src/main/java']
			}
		}
	}
}

task prepareSources(type: Copy) {
	from('src/main/java')
	into('build/src/main/java')

	filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
			version: project.version,
			sentrydsn: java.util.Optional.ofNullable(System.getenv("LAUNCHER_SENTRY_DSN")).orElse("")
	])
}

task buildWebroot(type: Exec) {
	workingDir "$projectDir/src/main/ui"

	if (os.contains('windows')) {
		commandLine 'cmd', '/c', 'node_modules\\.bin\\webpack.cmd', '--mode', 'production'
	} else {
		commandLine './node_modules/.bin/webpack', '--mode', 'production'
	}
}
processResources.dependsOn buildWebroot

compileJava {
	dependsOn prepareSources
}

task sourceJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives sourceJar, jar, shadowJar
}

license {
	ext {
		name = project.name
		organization = project.organization
		url = project.url
		year = Calendar.getInstance().get(Calendar.YEAR)
	}

	header project.file('config/HEADER.txt')
	include '**/*.java'

	ignoreFailures false
	strictCheck true

	mapping {
		java = 'SLASHSTAR_STYLE'
	}
}

processResources {
	from 'LICENSE.txt'
}

checkstyle {
	toolVersion = '8.18'
	configDir = project.file('config/')
	configProperties = [
			'basedir': project.projectDir,
			'suppressions': project.file('config/checkstyle-suppressions.xml')
	]
}

findbugs {
	toolVersion = '3.0.1'
	ignoreFailures = true
	sourceSets = [sourceSets.main]
	reportsDir = file("$project.buildDir/reports/findbugs")
	effort = 'max'
}

pmd {
	ignoreFailures = true
	sourceSets = [sourceSets.main]
	reportsDir = file("$project.buildDir/reports/pmd")
	ruleSets = ['java-basic', 'java-braces']
}

task npmInit(type: Exec){
	group = 'Launcher'
	workingDir "$projectDir/src/main/ui"

	if (os.contains('windows')) {
		commandLine 'cmd', '/c', 'npm', 'i'
	} else {
		commandLine 'npm', 'i'
	}
}

task runDevServer(type: Exec){
	group = 'Launcher'
	workingDir "$projectDir/src/main/ui"

	if (os.contains('windows')) {
		commandLine 'cmd', '/c', 'npm', 'run-script', 'devserver'
	} else {
		commandLine 'npm', 'run-script', 'devserver'
	}
}

task setup {
	group = 'Launcher'
	dependsOn 'npmInit'
	dependsOn 'downloadJre'
	dependsOn 'downloadCef'
}

if (!os.contains("mac")) {
	task runLauncher(type: JavaExec) {
		group = 'Launcher'

		if (os.contains("mac")) {
			throw new GradleException("Diese Aktion ist unter macOS nicht unterst√ºtzt")
		}

		classpath = sourceSets.main.runtimeClasspath + project.configurations.shadow

		main = jar.manifest.attributes.get('Main-Class')
		workingDir = project.file("run")

		systemProperty 'environment', 'dev'
		systemProperty 'java.library.path', project.file("run/jcef")

		if (System.getProperty('launcher.sentry.dsn') != null) {
			systemProperty 'launcher.sentry.dsn', System.getProperty('launcher.sentry.dsn')
		}

		def javaPath = 'run/runtime/bin/java'
		if (os.contains('win')) {
			javaPath += '.exe'
		}

		executable = "${project.file(javaPath)}"
	}
}